// Test Flutter Mobile App Sync API directly
// This simulates the actual Flutter app calling the sync API

const http = require('http');

// Test data simulating Flutter app saved recipes from SharedPreferences
const testMobileRecipes = [
    {
        "id": "ai_recipe_1758245850123_1",
        "title": "Vietnamese Salted Egg and Winter Melon Soup",
        "description": "A comforting and flavorful Vietnamese soup featuring salted duck eggs, winter melon, and fresh herbs.",
        "ingredients": [
            "5 salted duck eggs",
            "500g winter melon, peeled, seeded, and cubed", 
            "4 cups chicken broth",
            "1/4 cup chopped cilantro",
            "2 scallions, thinly sliced",
            "1-2 small red chilies, thinly sliced (optional)",
            "1 teaspoon ground black pepper",
            "1 tablespoon fish sauce (or to taste)",
            "1 teaspoon sugar (optional)"
        ],
        "instructions": [
            "Crack salted eggs into a bowl, separate whites and yolks",
            "Heat chicken broth in a large pot over medium heat",
            "Add winter melon cubes and cook for 10-15 minutes until tender",
            "Slowly pour in egg whites while stirring to create silky ribbons",
            "Add crumbled egg yolks and simmer for 2-3 minutes",
            "Season with fish sauce, pepper, and sugar to taste",
            "Remove from heat and garnish with cilantro, scallions, and chilies",
            "Serve hot with steamed rice"
        ],
        "cuisine": "Vietnamese",
        "preparationTime": 20,
        "cookingTime": 25,
        "servings": 5,
        "difficulty": "Medium",
        "tags": ["vietnamese", "soup", "comfort-food", "salted-egg", "winter-melon"],
        "imageUrl": "https://via.placeholder.com/400x300?text=Vietnamese+Soup",
        "estimatedCalories": 350,
        "createdAt": new Date().toISOString()
    },
    {
        "id": "ai_recipe_1758245850123_2", 
        "title": "Bit T·∫øt B√≤ Ki·ªÉu Ph√°p v·ªõi Rau C·ªß N∆∞·ªõng",
        "description": "M√≥n bit t·∫øt b√≤ m·ªÅm m·∫°i, th∆°m ngon ƒë∆∞·ª£c ch·∫ø bi·∫øn theo phong c√°ch Ph√°p, ƒÉn k√®m v·ªõi rau c·ªß n∆∞·ªõng v√† khoai t√¢y nghi·ªÅn, tao n√™n m·ªôt b·ªØa ƒÉn tinh t·∫ø v√† ƒë·∫≠y ƒë·ªß dinh d∆∞·ª°ng.",
        "ingredients": [
            "1.2 kg th·ªãt b√≤ thƒÉn ngo√†i (Ribeye) ho·∫∑c thƒÉn l∆∞ng (Sirloin)",
            "2 c·ªß h√†nh t√≠m, bƒÉm nh·ªè", 
            "4 t√©p t·ªèi, bƒÉm nh·ªè",
            "2 nh√†nh rosemary t∆∞∆°i",
            "1 mu·ªóng canh d·∫ßu olive",
            "Mu·ªëi v√† ti√™u ƒëen xay",
            "200g khoai t√¢y, g·ªçt v·ªè v√† c·∫Øt nh·ªè",
            "100g b∆° l·∫°t"
        ],
        "instructions": [
            "∆Ø·ªõp th·ªãt b√≤ v·ªõi mu·ªëi, ti√™u, d·∫ßu olive v√† rosemary trong 30 ph√∫t",
            "Lu·ªôc khoai t√¢y cho ƒë·∫øn khi m·ªÅm, sau ƒë√≥ nghi·ªÅn v·ªõi b∆°",
            "N∆∞·ªõng rau c·ªß trong l√≤ 200¬∞C trong 25-30 ph√∫t", 
            "Chi√™n th·ªãt b√≤ tr√™n ch·∫£o n√≥ng m·ªói m·∫∑t 3-4 ph√∫t ƒë·ªÉ c√≥ ƒë·ªô medium rare",
            "ƒê·ªÉ th·ªãt ngh·ªâ 5 ph√∫t tr∆∞·ªõc khi th√°i",
            "B√†y tr√≠ th·ªãt b√≤ c√πng khoai t√¢y nghi·ªÅn v√† rau c·ªß n∆∞·ªõng",
            "Trang tr√≠ v·ªõi rosemary t∆∞∆°i v√† ph·ª•c v·ª• ngay"
        ],
        "cuisine": "French",
        "preparationTime": 45,
        "cookingTime": 30,
        "servings": 4,
        "difficulty": "Hard",
        "tags": ["french", "beef", "steak", "elegant", "roasted-vegetables"],
        "imageUrl": "https://via.placeholder.com/400x300?text=French+Steak",
        "estimatedCalories": 650,
        "createdAt": new Date().toISOString()
    }
];

async function testFlutterSyncAPI() {
    const userId = '68b5415812984b1cef66b9a8'; // Huy's user ID 
    const authToken = 'test_token_flutter_app';
    
    const syncData = {
        userId: userId,
        savedRecipes: testMobileRecipes,
        deviceInfo: {
            platform: 'flutter',
            os: 'Android',
            version: '13', 
            device: 'Samsung Galaxy S23',
            appVersion: '1.0.0'
        }
    };

    const postData = JSON.stringify(syncData);
    
    const options = {
        hostname: 'localhost',
        port: 8190,
        path: '/api/testSyncSavedAiRecipes',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    return new Promise((resolve, reject) => {
        console.log('üì± Testing Flutter Mobile App Sync...');
        console.log(`   User: ${userId}`);
        console.log(`   Recipes to sync: ${testMobileRecipes.length}`);
        console.log(`   URL: http://localhost:8190/api/testSyncSavedAiRecipes`);
        console.log('');

        const req = http.request(options, (res) => {
            let responseData = '';

            res.on('data', (chunk) => {
                responseData += chunk;
            });

            res.on('end', () => {
                try {
                    const result = JSON.parse(responseData);
                    
                    if (result.success) {
                        console.log('‚úÖ Sync successful!');
                        console.log(`   Synced: ${result.data.syncedCount} recipes`);
                        console.log(`   Duplicates: ${result.data.duplicateCount} recipes`);
                        console.log(`   Errors: ${result.data.errorCount} recipes`);
                        console.log('');
                        console.log('üåê Recipes now available in admin panel:');
                        console.log('   Check admin panel: http://localhost:8190/saved-ai-recipes');
                        console.log('');
                        console.log('üì± Flutter recipes synced:');
                        testMobileRecipes.forEach((recipe, index) => {
                            console.log(`   ${index + 1}. ${recipe.title}`);
                            console.log(`      Cuisine: ${recipe.cuisine} | Difficulty: ${recipe.difficulty}`);
                        });
                    } else {
                        console.log('‚ùå Sync failed:', result.message);
                    }
                    
                    resolve(result);
                } catch (e) {
                    console.error('‚ùå Error parsing response:', e.message);
                    console.log('Raw response:', responseData);
                    reject(e);
                }
            });
        });

        req.on('error', (err) => {
            console.error('‚ùå Request error:', err.message);
            reject(err);
        });

        req.write(postData);
        req.end();
    });
}

testFlutterSyncAPI().catch(console.error);
