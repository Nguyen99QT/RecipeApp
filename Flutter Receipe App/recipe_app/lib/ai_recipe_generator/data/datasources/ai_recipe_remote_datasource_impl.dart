import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import '../../domain/entities/ai_meal.dart';
import '../../domain/entities/ai_recipe_request.dart';
import 'ai_recipe_remote_datasource.dart';

class AIRecipeRemoteDataSourceImpl implements AIRecipeRemoteDataSource {
  final String apiKey;
  final String baseUrl;
  final http.Client httpClient;

  AIRecipeRemoteDataSourceImpl({
    required this.apiKey,
    required this.httpClient,
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta',
  });

  @override
  Future<AIMeal> generateRecipeFromImages(AIRecipeRequest request) async {
    print(
        '[AI_REMOTE_DATASOURCE] =================== START API REQUEST ===================');
    print('[AI_REMOTE_DATASOURCE] Request details:');
    print(
        '[AI_REMOTE_DATASOURCE] - Preferred cuisine: ${request.preferredCuisine}');
    print(
        '[AI_REMOTE_DATASOURCE] - Dietary restrictions: ${request.dietaryRestrictions}');
    print(
        '[AI_REMOTE_DATASOURCE] - Difficulty level: ${request.difficultyLevel}');
    print(
        '[AI_REMOTE_DATASOURCE] - Target servings: ${request.targetServings}');
    print('[AI_REMOTE_DATASOURCE] - Max prep time: ${request.maxPrepTime}');
    print('[AI_REMOTE_DATASOURCE] - User prompt: ${request.userPrompt}');
    print(
        '[AI_REMOTE_DATASOURCE] - Number of images: ${request.imageUrls.length}');
    print('[AI_REMOTE_DATASOURCE] - Images: ${request.imageUrls}');

    try {
      final prompt = _buildPrompt(request);
      print(
          '[AI_REMOTE_DATASOURCE] üìù Generated prompt length: ${prompt.length} characters');

      // Convert images to base64
      final List<Map<String, dynamic>> imageParts = [];
      print(
          '[AI_REMOTE_DATASOURCE] üñºÔ∏è Processing ${request.imageUrls.length} images...');

      for (int i = 0; i < request.imageUrls.length; i++) {
        final imagePath = request.imageUrls[i];
        print(
            '[AI_REMOTE_DATASOURCE] Processing image ${i + 1}/${request.imageUrls.length}: $imagePath');

        try {
          final base64Data = await _getBase64FromImagePath(imagePath);

          if (base64Data.isNotEmpty) {
            print(
                '[AI_REMOTE_DATASOURCE] üîç Validating converted base64 data...');

            // Simple validation: just check if we can decode the base64
            print('[AI_REMOTE_DATASOURCE] üîç Validating base64 data...');

            try {
              final decodedBytes = base64Decode(base64Data);
              print(
                  '[AI_REMOTE_DATASOURCE] ‚úÖ Base64 validation passed. Decoded ${decodedBytes.length} bytes');
            } catch (e) {
              print(
                  '[AI_REMOTE_DATASOURCE] ‚ùå CRITICAL ERROR: Base64 decode validation failed: $e');
              throw Exception('D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá: $e');
            }

            imageParts.add({
              'inline_data': {
                'mime_type': 'image/jpeg',
                'data': base64Data,
              }
            });
            print(
                '[AI_REMOTE_DATASOURCE] ‚úÖ Image ${i + 1} successfully added to request');
          } else {
            print(
                '[AI_REMOTE_DATASOURCE] ‚ö†Ô∏è Skipping empty base64 data for image ${i + 1}: $imagePath');
          }
        } catch (e) {
          print(
              '[AI_REMOTE_DATASOURCE] ‚ùå Failed to process image ${i + 1}: $e');
          throw Exception('L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh ${i + 1}: $e');
        }
      }

      if (imageParts.isEmpty) {
        print(
            '[AI_REMOTE_DATASOURCE] ‚ùå CRITICAL ERROR: No valid images processed');
        throw Exception(
            'Kh√¥ng c√≥ h√¨nh ·∫£nh h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i h√¨nh ·∫£nh.');
      }

      print(
          '[AI_REMOTE_DATASOURCE] üì§ Preparing API request with ${imageParts.length} images');
      print(
          '[AI_REMOTE_DATASOURCE] üì§ Prompt preview: ${prompt.length > 200 ? '${prompt.substring(0, 200)}...' : prompt}');

      final payload = {
        'contents': [
          {
            'parts': [
              ...imageParts,
              {'text': prompt}
            ]
          }
        ],
        'generationConfig': {
          'temperature': 0.7,
          'topK': 40,
          'topP': 0.95,
          'maxOutputTokens': 2048,
        }
      };

      print('[AI_REMOTE_DATASOURCE] üåê Sending request to Gemini API...');
      print(
          '[AI_REMOTE_DATASOURCE] API URL: $baseUrl/models/gemini-1.5-flash:generateContent');
      print(
          '[AI_REMOTE_DATASOURCE] Payload size: ${json.encode(payload).length} characters');

      final response = await httpClient.post(
        Uri.parse(
            '$baseUrl/models/gemini-1.5-flash:generateContent?key=$apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(payload),
      );

      print(
          '[AI_REMOTE_DATASOURCE] üì° API Response received: ${response.statusCode}');
      print(
          '[AI_REMOTE_DATASOURCE] Response length: ${response.body.length} characters');

      if (response.statusCode == 200) {
        print('[AI_REMOTE_DATASOURCE] ‚úÖ API Success! Parsing response...');
        final data = json.decode(response.body);
        print(
            '[AI_REMOTE_DATASOURCE] Response structure: ${data.keys.toList()}');

        if (data['candidates'] != null && data['candidates'].isNotEmpty) {
          final content = data['candidates'][0]['content']['parts'][0]['text'];
          print(
              '[AI_REMOTE_DATASOURCE] Content length: ${content.length} characters');
          print(
              '[AI_REMOTE_DATASOURCE] Content preview: ${content.length > 300 ? content.substring(0, 300) + '...' : content}');

          final result = _parseAIResponse(content, request);
          print(
              '[AI_REMOTE_DATASOURCE] ‚úÖ Recipe parsed successfully: ${result.title}');
          print(
              '[AI_REMOTE_DATASOURCE] =================== END API REQUEST SUCCESS ===================');
          return result;
        } else {
          print(
              '[AI_REMOTE_DATASOURCE] ‚ùå CRITICAL ERROR: No candidates in response');
          throw Exception('API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
      } else {
        print('[AI_REMOTE_DATASOURCE] ‚ùå API ERROR ${response.statusCode}');
        print('[AI_REMOTE_DATASOURCE] Error body: ${response.body}');
        print(
            '[AI_REMOTE_DATASOURCE] =================== END API REQUEST FAILED ===================');
        throw Exception('L·ªói API: ${response.statusCode} - ${response.body}');
      }
    } catch (e, stackTrace) {
      print(
          '[AI_REMOTE_DATASOURCE] ‚ùå FATAL ERROR in generateRecipeFromImages: $e');
      print('[AI_REMOTE_DATASOURCE] Stack trace: $stackTrace');
      print(
          '[AI_REMOTE_DATASOURCE] =================== END API REQUEST FAILED ===================');
      throw Exception('Kh√¥ng th·ªÉ t·∫°o c√¥ng th·ª©c: ${e.toString()}');
    }
  }

  @override
  Future<AIMeal> improveRecipe(AIMeal meal, String feedback) async {
    try {
      final prompt = '''
C·∫£i thi·ªán c√¥ng th·ª©c n·∫•u ƒÉn sau d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng:

C√îNG TH·ª®C HI·ªÜN T·∫†I:
T√™n: ${meal.title}
M√¥ t·∫£: ${meal.description}
Nguy√™n li·ªáu: ${meal.ingredients.join(', ')}
H∆∞·ªõng d·∫´n: ${meal.instructions.join(' ')}
Th·ªùi gian chu·∫©n b·ªã: ${meal.preparationTime} ph√∫t
Th·ªùi gian n·∫•u: ${meal.cookingTime} ph√∫t

PH·∫¢N H·ªíI C·ª¶A NG∆Ø·ªúI D√ôNG:
$feedback

H√£y c·∫£i thi·ªán c√¥ng th·ª©c d·ª±a tr√™n ph·∫£n h·ªìi v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON nh∆∞ m·∫´u:
{
  "title": "T√™n c√¥ng th·ª©c ƒë√£ c·∫£i thi·ªán",
  "description": "M√¥ t·∫£ chi ti·∫øt",
  "ingredients": ["nguy√™n li·ªáu 1", "nguy√™n li·ªáu 2"],
  "instructions": ["b∆∞·ªõc 1", "b∆∞·ªõc 2"],
  "cuisine": "Vi·ªát Nam",
  "preparationTime": 15,
  "cookingTime": 30,
  "servings": 4,
  "difficulty": "D·ªÖ",
  "tags": ["tag1", "tag2"],
  "estimatedCalories": 300
}
''';

      final payload = {
        'contents': [
          {
            'parts': [
              {'text': prompt}
            ]
          }
        ],
        'generationConfig': {
          'temperature': 0.7,
          'topK': 40,
          'topP': 0.95,
          'maxOutputTokens': 2048,
        }
      };

      final response = await httpClient.post(
        Uri.parse(
            '$baseUrl/models/gemini-1.5-flash:generateContent?key=$apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(payload),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final content = data['candidates'][0]['content']['parts'][0]['text'];
        return _parseAIResponse(content, null);
      } else {
        throw Exception(
            'L·ªói API khi c·∫£i thi·ªán c√¥ng th·ª©c: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Kh√¥ng th·ªÉ c·∫£i thi·ªán c√¥ng th·ª©c: ${e.toString()}');
    }
  }

  String _buildPrompt(AIRecipeRequest request) {
    final basePrompt = '''
B·∫°n l√† m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp v√† chuy√™n gia AI ph√¢n t√≠ch h√¨nh ·∫£nh. H√£y ph√¢n t√≠ch nh·ªØng h√¨nh ·∫£nh t√¥i g·ª≠i v√† t·∫°o ra m·ªôt c√¥ng th·ª©c n·∫•u ƒÉn chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát.

Y√™u c·∫ßu c·ª• th·ªÉ:
${request.userPrompt ?? 'T·∫°o c√¥ng th·ª©c d·ª±a tr√™n nguy√™n li·ªáu trong h√¨nh'}
${request.dietaryRestrictions != null ? 'H·∫°n ch·∫ø ƒÉn ki√™ng: ${request.dietaryRestrictions}' : ''}
${request.preferredCuisine != null ? '·∫®m th·ª±c ∆∞a th√≠ch: ${request.preferredCuisine}' : ''}
${request.targetServings != null ? 'S·ªë ng∆∞·ªùi ƒÉn: ${request.targetServings}' : ''}
${request.difficultyLevel != null ? 'ƒê·ªô kh√≥: ${request.difficultyLevel}' : ''}
${request.maxPrepTime != null ? 'Th·ªùi gian t·ªëi ƒëa: ${request.maxPrepTime} ph√∫t' : ''}
${request.availableIngredients != null ? 'Nguy√™n li·ªáu c√≥ s·∫µn: ${request.availableIngredients!.join(', ')}' : ''}
${request.allergies != null ? 'D·ªã ·ª©ng: ${request.allergies!.join(', ')}' : ''}

H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c nh∆∞ sau:
{
  "title": "T√™n m√≥n ƒÉn ti·∫øng Vi·ªát",
  "description": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m√≥n ƒÉn",
  "ingredients": ["nguy√™n li·ªáu 1 v·ªõi ƒë∆°n v·ªã", "nguy√™n li·ªáu 2 v·ªõi ƒë∆°n v·ªã"],
  "instructions": ["B∆∞·ªõc 1: chi ti·∫øt", "B∆∞·ªõc 2: chi ti·∫øt"],
  "cuisine": "T√™n ·∫©m th·ª±c (VD: Vi·ªát Nam, Ch√¢u √Çu)",
  "preparationTime": 15,
  "cookingTime": 30,
  "servings": 4,
  "difficulty": "D·ªÖ/Trung b√¨nh/Kh√≥",
  "tags": ["tag1", "tag2"],
  "estimatedCalories": 300
}

CH√ö √ù: Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m b·∫•t k·ª≥ text n√†o kh√°c.
''';

    return basePrompt;
  }

  Future<String> _getBase64FromImagePath(String imagePath) async {
    print(
        '[AI_REMOTE_DATASOURCE] =================== START BASE64 CONVERSION ===================');
    print('[AI_REMOTE_DATASOURCE] Input imagePath: "$imagePath"');
    print('[AI_REMOTE_DATASOURCE] Input type: ${imagePath.runtimeType}');
    print('[AI_REMOTE_DATASOURCE] Input length: ${imagePath.length}');

    try {
      // Step 1: Validate input
      if (imagePath.trim().isEmpty) {
        print(
            '[AI_REMOTE_DATASOURCE] ‚ùå CRITICAL ERROR: Empty or whitespace-only image path');
        throw Exception('Image path is empty');
      }

      final String cleanPath = imagePath.trim();
      print('[AI_REMOTE_DATASOURCE] Clean path: "$cleanPath"');

      // Step 2: Check if it's already base64 data URL
      if (cleanPath.contains('data:image')) {
        print('[AI_REMOTE_DATASOURCE] üîç Detected data URL format');
        final parts = cleanPath.split(',');
        if (parts.length < 2) {
          print(
              '[AI_REMOTE_DATASOURCE] ‚ùå Invalid data URL format - missing comma separator');
          throw Exception('Invalid data URL format');
        }

        final base64Data = parts.last;
        print(
            '[AI_REMOTE_DATASOURCE] Extracted base64 part length: ${base64Data.length}');

        // Validate base64
        if (_isValidBase64(base64Data)) {
          print('[AI_REMOTE_DATASOURCE] ‚úÖ Valid base64 data found in data URL');
          return base64Data;
        } else {
          print('[AI_REMOTE_DATASOURCE] ‚ùå Invalid base64 data in data URL');
          throw Exception('Invalid base64 data in data URL');
        }
      }

      // Step 3: Check if it's already pure base64
      print('[AI_REMOTE_DATASOURCE] üîç Checking if input is pure base64...');

      // First try with strict validation
      if (_isValidBase64(cleanPath)) {
        print(
            '[AI_REMOTE_DATASOURCE] ‚úÖ Valid pure base64 format confirmed (strict)');
        return cleanPath;
      }

      // Fallback: try less strict validation for base64
      print('[AI_REMOTE_DATASOURCE] Trying fallback base64 validation...');
      if (cleanPath.length > 1000 &&
          !cleanPath.contains('\\') &&
          !cleanPath.contains('C:') &&
          !cleanPath.contains('D:') &&
          !cleanPath.contains('.jpg') &&
          !cleanPath.contains('.png')) {
        try {
          final testDecode = base64Decode(cleanPath);
          if (testDecode.length > 1000) {
            print(
                '[AI_REMOTE_DATASOURCE] ‚úÖ Valid pure base64 format confirmed (fallback)');
            return cleanPath;
          }
        } catch (e) {
          print('[AI_REMOTE_DATASOURCE] Fallback base64 decode failed: $e');
        }
      }

      // Step 4: Handle HTTP URLs
      if (cleanPath.startsWith('http://') || cleanPath.startsWith('https://')) {
        print('[AI_REMOTE_DATASOURCE] üåê Downloading from URL: $cleanPath');
        try {
          final response = await httpClient.get(Uri.parse(cleanPath));

          if (response.statusCode == 200) {
            print(
                '[AI_REMOTE_DATASOURCE] URL downloaded successfully. Bytes length: ${response.bodyBytes.length}');

            if (response.bodyBytes.isEmpty) {
              print('[AI_REMOTE_DATASOURCE] ‚ùå Downloaded file is empty');
              throw Exception('Downloaded image is empty');
            }

            // Validate image format
            if (!_isValidImageFormat(response.bodyBytes)) {
              print(
                  '[AI_REMOTE_DATASOURCE] ‚ùå Downloaded file is not a valid image');
              throw Exception('Downloaded file is not a valid image');
            }

            final base64Data = base64Encode(response.bodyBytes);
            print(
                '[AI_REMOTE_DATASOURCE] ‚úÖ URL downloaded and converted, size: ${response.bodyBytes.length} bytes');
            return base64Data;
          } else {
            print(
                '[AI_REMOTE_DATASOURCE] ‚ùå Failed to download URL: ${response.statusCode}');
            throw Exception(
                'Failed to download image from URL: ${response.statusCode}');
          }
        } catch (e) {
          print('[AI_REMOTE_DATASOURCE] ‚ùå URL download error: $e');
          throw Exception('Error downloading image from URL: $e');
        }
      }

      // Step 5: Handle file paths - try multiple approaches
      print('[AI_REMOTE_DATASOURCE] üîç Treating as file path');

      // Try different path formats
      final List<String> pathsToTry = [
        cleanPath,
        cleanPath.startsWith('file://') ? cleanPath.substring(7) : cleanPath,
        cleanPath.replaceAll('\\', '/'),
        cleanPath.replaceAll('/', '\\'),
      ];

      // Remove duplicates
      final uniquePaths = pathsToTry.toSet().toList();
      print(
          '[AI_REMOTE_DATASOURCE] Trying ${uniquePaths.length} path variations');

      for (int i = 0; i < uniquePaths.length; i++) {
        final pathToTry = uniquePaths[i];
        print('[AI_REMOTE_DATASOURCE] Attempt ${i + 1}: "$pathToTry"');

        try {
          final file = File(pathToTry);
          print('[AI_REMOTE_DATASOURCE] File object created for: ${file.path}');
          print('[AI_REMOTE_DATASOURCE] Absolute path: ${file.absolute.path}');

          final exists = await file.exists();
          print('[AI_REMOTE_DATASOURCE] File exists check: $exists');

          if (exists) {
            print('[AI_REMOTE_DATASOURCE] üìÅ Reading file bytes...');
            final bytes = await file.readAsBytes();
            print(
                '[AI_REMOTE_DATASOURCE] File read successfully. Bytes length: ${bytes.length}');

            if (bytes.isEmpty) {
              print('[AI_REMOTE_DATASOURCE] ‚ùå File is empty, trying next path');
              continue;
            }

            // Check file size (max 10MB)
            const maxSize = 10 * 1024 * 1024;
            if (bytes.length > maxSize) {
              print(
                  '[AI_REMOTE_DATASOURCE] ‚ùå File too large: ${bytes.length} bytes');
              throw Exception('Image file too large (max 10MB)');
            }

            // Validate image format
            if (!_isValidImageFormat(bytes)) {
              print(
                  '[AI_REMOTE_DATASOURCE] ‚ùå Invalid image format, first 20 bytes: ${bytes.take(20).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
              continue; // Try next path variation
            }

            print('[AI_REMOTE_DATASOURCE] üîÑ Converting bytes to base64...');
            final base64Data = base64Encode(bytes);
            print(
                '[AI_REMOTE_DATASOURCE] ‚úÖ File converted to base64, size: ${bytes.length} bytes, base64 length: ${base64Data.length}');
            print(
                '[AI_REMOTE_DATASOURCE] =================== END BASE64 CONVERSION SUCCESS ===================');
            return base64Data;
          } else {
            print(
                '[AI_REMOTE_DATASOURCE] File does not exist at: "$pathToTry"');
          }
        } catch (e) {
          print('[AI_REMOTE_DATASOURCE] Error with path "$pathToTry": $e');
          continue; // Try next path
        }
      }

      // Step 6: If all file path attempts failed
      print(
          '[AI_REMOTE_DATASOURCE] ‚ùå CRITICAL ERROR: Could not process image path with any method');
      print('[AI_REMOTE_DATASOURCE] Original path: "$imagePath"');
      print(
          '[AI_REMOTE_DATASOURCE] Tried ${uniquePaths.length} path variations');
      print(
          '[AI_REMOTE_DATASOURCE] =================== FAILED BASE64 CONVERSION ===================');
      throw Exception(
          'Kh√¥ng th·ªÉ ƒë·ªçc file h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ ch·ªçn h√¨nh ·∫£nh kh√°c.');
    } catch (e, stackTrace) {
      print('[AI_REMOTE_DATASOURCE] ‚ùå FATAL ERROR in base64 conversion: $e');
      print('[AI_REMOTE_DATASOURCE] Stack trace: $stackTrace');
      print(
          '[AI_REMOTE_DATASOURCE] =================== FAILED BASE64 CONVERSION ===================');

      // Re-throw with more user-friendly message
      if (e.toString().contains('Permission denied') ||
          e.toString().contains('Access denied')) {
        throw Exception(
            'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file h√¨nh ·∫£nh. Vui l√≤ng ki·ªÉm tra quy·ªÅn ·ª©ng d·ª•ng.');
      } else if (e.toString().contains('No such file') ||
          e.toString().contains('does not exist')) {
        throw Exception(
            'File h√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn h√¨nh ·∫£nh kh√°c.');
      } else if (e.toString().contains('Invalid image format')) {
        throw Exception(
            'ƒê·ªãnh d·∫°ng h√¨nh ·∫£nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn file JPG ho·∫∑c PNG.');
      } else {
        throw Exception('L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh: ${e.toString()}');
      }
    }
  }

  AIMeal _parseAIResponse(String content, AIRecipeRequest? request) {
    try {
      // T√¨m JSON trong response
      final jsonStart = content.indexOf('{');
      final jsonEnd = content.lastIndexOf('}') + 1;

      if (jsonStart == -1 || jsonEnd <= jsonStart) {
        throw Exception('Kh√¥ng t√¨m th·∫•y JSON trong response');
      }

      final jsonString = content.substring(jsonStart, jsonEnd);
      final Map<String, dynamic> recipeData = json.decode(jsonString);

      return AIMeal(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: recipeData['title'] ?? 'M√≥n ƒÉn AI',
        description: recipeData['description'] ?? '',
        ingredients: List<String>.from(recipeData['ingredients'] ?? []),
        instructions: List<String>.from(recipeData['instructions'] ?? []),
        cuisine: recipeData['cuisine'] ?? 'Vi·ªát Nam',
        preparationTime: recipeData['preparationTime'] ?? 15,
        cookingTime: recipeData['cookingTime'] ?? 30,
        servings: recipeData['servings'] ?? 4,
        difficulty: recipeData['difficulty'] ?? 'D·ªÖ',
        tags: List<String>.from(recipeData['tags'] ?? []),
        estimatedCalories: recipeData['estimatedCalories']?.toDouble(),
        createdAt: DateTime.now(),
      );
    } catch (e) {
      throw Exception('Kh√¥ng th·ªÉ ph√¢n t√≠ch response t·ª´ AI: ${e.toString()}');
    }
  }

  // Helper method to validate base64 string
  bool _isValidBase64(String str) {
    try {
      // Remove whitespace
      final cleanStr = str.replaceAll(RegExp(r'\s+'), '');
      if (cleanStr.isEmpty) {
        return false;
      }

      // Should not contain obvious file path indicators
      if (cleanStr.contains('C:\\') ||
          cleanStr.contains('D:\\') ||
          cleanStr.contains('/data/user/') ||
          cleanStr.contains('/storage/emulated/') ||
          cleanStr.contains('file://') ||
          cleanStr.contains('.jpg') ||
          cleanStr.contains('.png') ||
          cleanStr.contains('.jpeg') ||
          cleanStr.contains('cache/')) {
        return false;
      }

      // Simply try to decode it - if it works, it's valid base64
      final decoded = base64Decode(cleanStr);

      // Just check if it's not empty
      return decoded.isNotEmpty;
    } catch (e) {
      return false;
    }
  }

  // Helper method to validate image format by checking magic bytes
  bool _isValidImageFormat(List<int> bytes) {
    if (bytes.length < 3) return false;

    // Check for JPEG signature (FF D8 FF)
    if (bytes[0] == 0xFF && bytes[1] == 0xD8 && bytes[2] == 0xFF) {
      return true;
    }

    // Check for PNG signature (89 50 4E 47)
    if (bytes.length >= 4 &&
        bytes[0] == 0x89 &&
        bytes[1] == 0x50 &&
        bytes[2] == 0x4E &&
        bytes[3] == 0x47) {
      return true;
    }

    // Check for GIF signature (47 49 46)
    if (bytes.length >= 3 &&
        bytes[0] == 0x47 &&
        bytes[1] == 0x49 &&
        bytes[2] == 0x46) {
      return true;
    }

    // Check for WebP signature (52 49 46 46)
    if (bytes.length >= 4 &&
        bytes[0] == 0x52 &&
        bytes[1] == 0x49 &&
        bytes[2] == 0x46 &&
        bytes[3] == 0x46) {
      return true;
    }

    // If none of the above match, but it's a reasonable size, assume it's valid
    // This is a fallback for cases where the image format checking is too strict
    return bytes.length > 1000;
  }
}
